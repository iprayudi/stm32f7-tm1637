
stm32f7-tm1637.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004568  08004568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004570  08004570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  2000000c  08004584  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08004584  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3bf  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002136  00000000  00000000  0002e3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  000311b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002706d  00000000  00000000  00031d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac0b  00000000  00000000  00058d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f43d0  00000000  00000000  000639a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  00157dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004524 	.word	0x08004524

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004524 	.word	0x08004524

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fc1a 	bl	8000d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f821 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f953 	bl	80007f0 <MX_GPIO_Init>
  MX_ETH_Init();
 800054a:	f000 f8b3 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800054e:	f000 f8f1 	bl	8000734 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000552:	f000 f91f 	bl	8000794 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  TM1637_clearDisplay();
 8000556:	f003 ffa3 	bl	80044a0 <TM1637_clearDisplay>
  TM1637_brightness(3);
 800055a:	2003      	movs	r0, #3
 800055c:	f003 ff8e 	bl	800447c <TM1637_brightness>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x4c>)
 8000564:	f001 fbb3 	bl	8001cce <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056c:	f000 fc60 	bl	8000e30 <HAL_Delay>

	  count++;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
	  TM1637_display_all((uint16_t) count);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	b29b      	uxth	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ff38 	bl	80043f0 <TM1637_display_all>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000580:	e7ee      	b.n	8000560 <main+0x28>
 8000582:	bf00      	nop
 8000584:	40020400 	.word	0x40020400

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0b8      	sub	sp, #224	; 0xe0
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 ffbc 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2290      	movs	r2, #144	; 0x90
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 ffad 	bl	8004514 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f001 fcdf 	bl	8001f7c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <SystemClock_Config+0x120>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	4a39      	ldr	r2, [pc, #228]	; (80006a8 <SystemClock_Config+0x120>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <SystemClock_Config+0x120>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <SystemClock_Config+0x124>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005de:	4a33      	ldr	r2, [pc, #204]	; (80006ac <SystemClock_Config+0x124>)
 80005e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <SystemClock_Config+0x124>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd06 	bl	800203c <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000636:	f000 f98d 	bl	8000954 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800063a:	f001 fcaf 	bl	8001f9c <HAL_PWREx_EnableOverDrive>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000644:	f000 f986 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000668:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800066c:	2103      	movs	r1, #3
 800066e:	4618      	mov	r0, r3
 8000670:	f001 ff56 	bl	8002520 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800067a:	f000 f96b 	bl	8000954 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <SystemClock_Config+0x128>)
 8000680:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000682:	2300      	movs	r3, #0
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f939 	bl	8002908 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800069c:	f000 f95a 	bl	8000954 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	37e0      	adds	r7, #224	; 0xe0
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000
 80006b0:	00200100 	.word	0x00200100

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ETH_Init+0x78>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_ETH_Init+0x7c>)
 80006bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ETH_Init+0x78>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ETH_Init+0x78>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ETH_Init+0x78>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_ETH_Init+0x78>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ETH_Init+0x78>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	3302      	adds	r3, #2
 80006e2:	22e1      	movs	r2, #225	; 0xe1
 80006e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ETH_Init+0x78>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	3303      	adds	r3, #3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ETH_Init+0x78>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_ETH_Init+0x78>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	3305      	adds	r3, #5
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_ETH_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_ETH_Init+0x78>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_ETH_Init+0x78>)
 8000712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000716:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_ETH_Init+0x78>)
 800071a:	f000 fc91 	bl	8001040 <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f916 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200004ac 	.word	0x200004ac
 8000730:	40028000 	.word	0x40028000

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART3_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART3_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000778:	f002 fcec 	bl	8003154 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8e7 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40004800 	.word	0x40004800

08000794 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800079e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2206      	movs	r2, #6
 80007a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	f001 fa94 	bl	8001d04 <HAL_PCD_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f8b7 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a8 	.word	0x200000a8

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <MX_GPIO_Init+0x150>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a4d      	ldr	r2, [pc, #308]	; (8000940 <MX_GPIO_Init+0x150>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b4b      	ldr	r3, [pc, #300]	; (8000940 <MX_GPIO_Init+0x150>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b48      	ldr	r3, [pc, #288]	; (8000940 <MX_GPIO_Init+0x150>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a47      	ldr	r2, [pc, #284]	; (8000940 <MX_GPIO_Init+0x150>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <MX_GPIO_Init+0x150>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <MX_GPIO_Init+0x150>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a41      	ldr	r2, [pc, #260]	; (8000940 <MX_GPIO_Init+0x150>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b3f      	ldr	r3, [pc, #252]	; (8000940 <MX_GPIO_Init+0x150>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <MX_GPIO_Init+0x150>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3b      	ldr	r2, [pc, #236]	; (8000940 <MX_GPIO_Init+0x150>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_GPIO_Init+0x150>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_GPIO_Init+0x150>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a35      	ldr	r2, [pc, #212]	; (8000940 <MX_GPIO_Init+0x150>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <MX_GPIO_Init+0x150>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MX_GPIO_Init+0x150>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MX_GPIO_Init+0x150>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_GPIO_Init+0x150>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|TM1637CLK_Pin 
 8000896:	2200      	movs	r2, #0
 8000898:	f244 3181 	movw	r1, #17281	; 0x4381
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <MX_GPIO_Init+0x154>)
 800089e:	f001 f9fd 	bl	8001c9c <HAL_GPIO_WritePin>
                          |TM1637DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4828      	ldr	r0, [pc, #160]	; (8000948 <MX_GPIO_Init+0x158>)
 80008a8:	f001 f9f8 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0x15c>)
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4823      	ldr	r0, [pc, #140]	; (8000950 <MX_GPIO_Init+0x160>)
 80008c2:	f001 f829 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4819      	ldr	r0, [pc, #100]	; (8000944 <MX_GPIO_Init+0x154>)
 80008e0:	f001 f81a 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x158>)
 80008fc:	f001 f80c 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x158>)
 8000914:	f001 f800 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1637CLK_Pin TM1637DATA_Pin */
  GPIO_InitStruct.Pin = TM1637CLK_Pin|TM1637DATA_Pin;
 8000918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800091e:	2311      	movs	r3, #17
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x154>)
 8000932:	f000 fff1 	bl	8001918 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	10110000 	.word	0x10110000
 8000950:	40020800 	.word	0x40020800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a4e      	ldr	r2, [pc, #312]	; (8000b04 <HAL_ETH_MspInit+0x158>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	f040 8096 	bne.w	8000afc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009d0:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a4c      	ldr	r2, [pc, #304]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a46      	ldr	r2, [pc, #280]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3c:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_ETH_MspInit+0x15c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a78:	2332      	movs	r3, #50	; 0x32
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a88:	230b      	movs	r3, #11
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	481e      	ldr	r0, [pc, #120]	; (8000b0c <HAL_ETH_MspInit+0x160>)
 8000a94:	f000 ff40 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a98:	2386      	movs	r3, #134	; 0x86
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <HAL_ETH_MspInit+0x164>)
 8000ab4:	f000 ff30 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_ETH_MspInit+0x168>)
 8000ad6:	f000 ff1f 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ada:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aec:	230b      	movs	r3, #11
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <HAL_ETH_MspInit+0x16c>)
 8000af8:	f000 ff0e 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3738      	adds	r7, #56	; 0x38
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40028000 	.word	0x40028000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x7c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d128      	bne.n	8000b90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b80:	2307      	movs	r3, #7
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b8c:	f000 fec4 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020c00 	.word	0x40020c00

08000ba4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc4:	d141      	bne.n	8000c4a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <HAL_PCD_MspInit+0xb4>)
 8000bfc:	f000 fe8c 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <HAL_PCD_MspInit+0xb4>)
 8000c16:	f000 fe7f 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6353      	str	r3, [r2, #52]	; 0x34
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_PCD_MspInit+0xb0>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f89e 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <SystemInit+0x5c>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <SystemInit+0x5c>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <SystemInit+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <SystemInit+0x60>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <SystemInit+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <SystemInit+0x60>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <SystemInit+0x60>)
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <SystemInit+0x64>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <SystemInit+0x60>)
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <SystemInit+0x68>)
 8000cee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <SystemInit+0x60>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <SystemInit+0x60>)
 8000cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SystemInit+0x5c>)
 8000d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d08:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	fef6ffff 	.word	0xfef6ffff
 8000d20:	24003010 	.word	0x24003010

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d2a:	e003      	b.n	8000d34 <LoopCopyDataInit>

08000d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d32:	3104      	adds	r1, #4

08000d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d3c:	d3f6      	bcc.n	8000d2c <CopyDataInit>
  ldr  r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d40:	e002      	b.n	8000d48 <LoopFillZerobss>

08000d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d44:	f842 3b04 	str.w	r3, [r2], #4

08000d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d4c:	d3f9      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffb3 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f003 fbbb 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fbef 	bl	8000538 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000d60:	08004578 	.word	0x08004578
  ldr  r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d70:	200004fc 	.word	0x200004fc

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>

08000d76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f92c 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f805 	bl	8000d90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d86:	f7ff fded 	bl	8000964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f939 	bl	8001026 <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f90f 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	200004f4 	.word	0x200004f4

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200004f4 	.word	0x200004f4

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_Delay+0x40>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001050:	4ba9      	ldr	r3, [pc, #676]	; (80012f8 <HAL_ETH_Init+0x2b8>)
 8001052:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e183      	b.n	800136e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fc96 	bl	80009ac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b9e      	ldr	r3, [pc, #632]	; (80012fc <HAL_ETH_Init+0x2bc>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	4a9d      	ldr	r2, [pc, #628]	; (80012fc <HAL_ETH_Init+0x2bc>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6453      	str	r3, [r2, #68]	; 0x44
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <HAL_ETH_Init+0x2bc>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001098:	4b99      	ldr	r3, [pc, #612]	; (8001300 <HAL_ETH_Init+0x2c0>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a98      	ldr	r2, [pc, #608]	; (8001300 <HAL_ETH_Init+0x2c0>)
 800109e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010a2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010a4:	4b96      	ldr	r3, [pc, #600]	; (8001300 <HAL_ETH_Init+0x2c0>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4994      	ldr	r1, [pc, #592]	; (8001300 <HAL_ETH_Init+0x2c0>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010ca:	f7ff fea5 	bl	8000e18 <HAL_GetTick>
 80010ce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010d0:	e011      	b.n	80010f6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010d2:	f7ff fea1 	bl	8000e18 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e0:	d909      	bls.n	80010f6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e13b      	b.n	800136e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e4      	bne.n	80010d2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f023 031c 	bic.w	r3, r3, #28
 8001116:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001118:	f001 fbc2 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 800111c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4a78      	ldr	r2, [pc, #480]	; (8001304 <HAL_ETH_Init+0x2c4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d908      	bls.n	8001138 <HAL_ETH_Init+0xf8>
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_ETH_Init+0x2c8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d804      	bhi.n	8001138 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e027      	b.n	8001188 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	4a73      	ldr	r2, [pc, #460]	; (8001308 <HAL_ETH_Init+0x2c8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d908      	bls.n	8001152 <HAL_ETH_Init+0x112>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	4a72      	ldr	r2, [pc, #456]	; (800130c <HAL_ETH_Init+0x2cc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d804      	bhi.n	8001152 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f043 030c 	orr.w	r3, r3, #12
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	e01a      	b.n	8001188 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4a6d      	ldr	r2, [pc, #436]	; (800130c <HAL_ETH_Init+0x2cc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d903      	bls.n	8001162 <HAL_ETH_Init+0x122>
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4a6c      	ldr	r2, [pc, #432]	; (8001310 <HAL_ETH_Init+0x2d0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d911      	bls.n	8001186 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4a6a      	ldr	r2, [pc, #424]	; (8001310 <HAL_ETH_Init+0x2d0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d908      	bls.n	800117c <HAL_ETH_Init+0x13c>
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4a69      	ldr	r2, [pc, #420]	; (8001314 <HAL_ETH_Init+0x2d4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d804      	bhi.n	800117c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e005      	b.n	8001188 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	e000      	b.n	8001188 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001186:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001190:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001194:	2100      	movs	r1, #0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f956 	bl	8001448 <HAL_ETH_WritePHYRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80011a6:	6939      	ldr	r1, [r7, #16]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f9b3 	bl	8001514 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0d9      	b.n	800136e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80011ba:	20ff      	movs	r0, #255	; 0xff
 80011bc:	f7ff fe38 	bl	8000e30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a7 	beq.w	8001318 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011ca:	f7ff fe25 	bl	8000e18 <HAL_GetTick>
 80011ce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f8cd 	bl	8001378 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011de:	f7ff fe1b 	bl	8000e18 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d90f      	bls.n	8001210 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f98c 	bl	8001514 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0ae      	b.n	800136e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0da      	beq.n	80011d0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800121a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121e:	2100      	movs	r1, #0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f911 	bl	8001448 <HAL_ETH_WritePHYRegister>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f96e 	bl	8001514 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001240:	2301      	movs	r3, #1
 8001242:	e094      	b.n	800136e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fde8 	bl	8000e18 <HAL_GetTick>
 8001248:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	461a      	mov	r2, r3
 8001250:	2101      	movs	r1, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f890 	bl	8001378 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001258:	f7ff fdde 	bl	8000e18 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d90f      	bls.n	800128a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800126e:	6939      	ldr	r1, [r7, #16]
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f94f 	bl	8001514 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e071      	b.n	800136e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0da      	beq.n	800124a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	461a      	mov	r2, r3
 800129a:	211f      	movs	r1, #31
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f86b 	bl	8001378 <HAL_ETH_ReadPHYRegister>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00b      	beq.n	80012c0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f930 	bl	8001514 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012bc:	2301      	movs	r3, #1
 80012be:	e056      	b.n	800136e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	e002      	b.n	80012da <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e037      	b.n	800135c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	e032      	b.n	800135c <HAL_ETH_Init+0x31c>
 80012f6:	bf00      	nop
 80012f8:	03938700 	.word	0x03938700
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800
 8001304:	01312cff 	.word	0x01312cff
 8001308:	02160ebf 	.word	0x02160ebf
 800130c:	039386ff 	.word	0x039386ff
 8001310:	05f5e0ff 	.word	0x05f5e0ff
 8001314:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001328:	4313      	orrs	r3, r2
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f889 	bl	8001448 <HAL_ETH_WritePHYRegister>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f8e6 	bl	8001514 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e00c      	b.n	800136e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001354:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001358:	f7ff fd6a 	bl	8000e30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8d8 	bl	8001514 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop

08001378 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b82      	cmp	r3, #130	; 0x82
 8001398:	d101      	bne.n	800139e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
 800139c:	e050      	b.n	8001440 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2282      	movs	r2, #130	; 0x82
 80013a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 031c 	and.w	r3, r3, #28
 80013b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8a1b      	ldrh	r3, [r3, #16]
 80013ba:	02db      	lsls	r3, r3, #11
 80013bc:	b29b      	uxth	r3, r3
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80013c4:	897b      	ldrh	r3, [r7, #10]
 80013c6:	019b      	lsls	r3, r3, #6
 80013c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f023 0302 	bic.w	r3, r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ea:	f7ff fd15 	bl	8000e18 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013f0:	e015      	b.n	800141e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80013f2:	f7ff fd11 	bl	8000e18 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d309      	bcc.n	8001416 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e014      	b.n	8001440 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e4      	bne.n	80013f2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	460b      	mov	r3, r1
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b42      	cmp	r3, #66	; 0x42
 8001468:	d101      	bne.n	800146e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800146a:	2302      	movs	r3, #2
 800146c:	e04e      	b.n	800150c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2242      	movs	r2, #66	; 0x42
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 031c 	and.w	r3, r3, #28
 8001484:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8a1b      	ldrh	r3, [r3, #16]
 800148a:	02db      	lsls	r3, r3, #11
 800148c:	b29b      	uxth	r3, r3
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	019b      	lsls	r3, r3, #6
 8001498:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff fca8 	bl	8000e18 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014ca:	e015      	b.n	80014f8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80014cc:	f7ff fca4 	bl	8000e18 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014da:	d309      	bcc.n	80014f0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e00d      	b.n	800150c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e4      	bne.n	80014cc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0b0      	sub	sp, #192	; 0xc0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001530:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001538:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001542:	2300      	movs	r3, #0
 8001544:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	663b      	str	r3, [r7, #96]	; 0x60
 8001560:	e001      	b.n	8001566 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001570:	2300      	movs	r3, #0
 8001572:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80015e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ec:	4bab      	ldr	r3, [pc, #684]	; (800189c <ETH_MACDMAConfig+0x388>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80015f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80015f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80015f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80015fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80015fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80015fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001600:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001606:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800160a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800160c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800160e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001614:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001618:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800161a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800161c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800161e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001620:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001624:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001628:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800162a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800162e:	4313      	orrs	r3, r2
 8001630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800163c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff fbf1 	bl	8000e30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001656:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001658:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800165a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800165c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800165e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001660:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001666:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800166c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800166e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001672:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001678:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800167c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001684:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001686:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fbcc 	bl	8000e30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80016c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016c8:	4013      	ands	r3, r2
 80016ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80016ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80016d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80016d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80016da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80016de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80016e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80016e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80016e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80016ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80016ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80016f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80016f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016f6:	4313      	orrs	r3, r2
 80016f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001704:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fb8d 	bl	8000e30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800171e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001720:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fb78 	bl	8000e30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001748:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800174e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001752:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800175c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800176e:	2304      	movs	r3, #4
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800178e:	2300      	movs	r3, #0
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001792:	2300      	movs	r3, #0
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	f241 0318 	movw	r3, #4120	; 0x1018
 800179e:	4413      	add	r3, r2
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80017a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <ETH_MACDMAConfig+0x38c>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80017b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80017b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80017ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80017bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80017be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80017c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80017c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80017c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80017c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80017c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80017ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80017ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80017d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d8:	4313      	orrs	r3, r2
 80017da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80017e6:	4413      	add	r3, r2
 80017e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80017f6:	4413      	add	r3, r2
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fb16 	bl	8000e30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f241 0318 	movw	r3, #4120	; 0x1018
 800180c:	4413      	add	r3, r2
 800180e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001812:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001818:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800181c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001820:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001824:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001828:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800182a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800182c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800182e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800184c:	2001      	movs	r0, #1
 800184e:	f7ff faef 	bl	8000e30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800185e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10d      	bne.n	8001884 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <ETH_MACDMAConfig+0x390>)
 800187a:	431a      	orrs	r2, r3
 800187c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001880:	440b      	add	r3, r1
 8001882:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	461a      	mov	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f80b 	bl	80018a8 <ETH_MACAddressConfig>
}
 8001892:	bf00      	nop
 8001894:	37c0      	adds	r7, #192	; 0xc0
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	ff20810f 	.word	0xff20810f
 80018a0:	f8de3f23 	.word	0xf8de3f23
 80018a4:	00010040 	.word	0x00010040

080018a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3305      	adds	r3, #5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	3204      	adds	r2, #4
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <ETH_MACAddressConfig+0x68>)
 80018ca:	4413      	add	r3, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3303      	adds	r3, #3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	061a      	lsls	r2, r3, #24
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3302      	adds	r3, #2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4313      	orrs	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <ETH_MACAddressConfig+0x6c>)
 80018fa:	4413      	add	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	6013      	str	r3, [r2, #0]
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40028040 	.word	0x40028040
 8001914:	40028044 	.word	0x40028044

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e175      	b.n	8001c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8164 	bne.w	8001c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x4e>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b12      	cmp	r3, #18
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	69b9      	ldr	r1, [r7, #24]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d00b      	beq.n	8001a02 <HAL_GPIO_Init+0xea>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f6:	2b11      	cmp	r3, #17
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80be 	beq.w	8001c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_GPIO_Init+0x320>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a64      	ldr	r2, [pc, #400]	; (8001c38 <HAL_GPIO_Init+0x320>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_GPIO_Init+0x320>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aba:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d037      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x32c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_GPIO_Init+0x338>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x340>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x344>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x348>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e012      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e010      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b68:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9a:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae86 	bls.w	8001938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3724      	adds	r7, #36	; 0x24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40021400 	.word	0x40021400
 8001c58:	40021800 	.word	0x40021800
 8001c5c:	40021c00 	.word	0x40021c00
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40022400 	.word	0x40022400
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d104      	bne.n	8001cf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b08f      	sub	sp, #60	; 0x3c
 8001d08:	af0a      	add	r7, sp, #40	; 0x28
 8001d0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e10a      	b.n	8001f2c <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe ff3a 	bl	8000ba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fe6d 	bl	8003a1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	687e      	ldr	r6, [r7, #4]
 8001d4a:	466d      	mov	r5, sp
 8001d4c:	f106 0410 	add.w	r4, r6, #16
 8001d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d60:	1d33      	adds	r3, r6, #4
 8001d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f001 fe01 	bl	800396c <USB_CoreInit>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0d7      	b.n	8001f2c <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fe5b 	bl	8003a3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e04a      	b.n	8001e24 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	333d      	adds	r3, #61	; 0x3d
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	333c      	adds	r3, #60	; 0x3c
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	b298      	uxth	r0, r3
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3342      	adds	r3, #66	; 0x42
 8001dca:	4602      	mov	r2, r0
 8001dcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	333f      	adds	r3, #63	; 0x3f
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	3344      	adds	r3, #68	; 0x44
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3348      	adds	r3, #72	; 0x48
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3350      	adds	r3, #80	; 0x50
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	3301      	adds	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3af      	bcc.n	8001d8e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e044      	b.n	8001ebe <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3b5      	bcc.n	8001e34 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	687e      	ldr	r6, [r7, #4]
 8001ed0:	466d      	mov	r5, sp
 8001ed2:	f106 0410 	add.w	r4, r6, #16
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee6:	1d33      	adds	r3, r6, #4
 8001ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eea:	6838      	ldr	r0, [r7, #0]
 8001eec:	f001 fdd2 	bl	8003a94 <USB_DevInit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e014      	b.n	8001f2c <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f80a 	bl	8001f34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 ff92 	bl	8003e4e <USB_DevDisconnect>

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	10000003 	.word	0x10000003

08001f7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a22      	ldr	r2, [pc, #136]	; (8002034 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fca:	f7fe ff25 	bl	8000e18 <HAL_GetTick>
 8001fce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd0:	e009      	b.n	8001fe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fd2:	f7fe ff21 	bl	8000e18 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe0:	d901      	bls.n	8001fe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e022      	b.n	800202c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002000:	f7fe ff0a 	bl	8000e18 <HAL_GetTick>
 8002004:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002006:	e009      	b.n	800201c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002008:	f7fe ff06 	bl	8000e18 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002016:	d901      	bls.n	800201c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e007      	b.n	800202c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_PWREx_EnableOverDrive+0x9c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002028:	d1ee      	bne.n	8002008 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000

0800203c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e25e      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	4b96      	ldr	r3, [pc, #600]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00c      	beq.n	8002086 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206c:	4b93      	ldr	r3, [pc, #588]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x62>
 8002078:	4b90      	ldr	r3, [pc, #576]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x130>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d168      	bne.n	800216c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e238      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x7a>
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a83      	ldr	r2, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e02e      	b.n	8002114 <HAL_RCC_OscConfig+0xd8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x9c>
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7e      	ldr	r2, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7b      	ldr	r2, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xd8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0xc0>
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a75      	ldr	r2, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a72      	ldr	r2, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xd8>
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6b      	ldr	r2, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fe7c 	bl	8000e18 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fe78 	bl	8000e18 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1ec      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fe68 	bl	8000e18 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fe64 	bl	8000e18 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1d8      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x110>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d069      	beq.n	800224e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x190>
 8002192:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1ac      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	493d      	ldr	r1, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e040      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe1a 	bl	8000e18 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe fe16 	bl	8000e18 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e18a      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4929      	ldr	r1, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
 800221a:	e018      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fdf6 	bl	8000e18 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fdf2 	bl	8000e18 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e166      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d038      	beq.n	80022cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002266:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7fe fdd3 	bl	8000e18 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002276:	f7fe fdcf 	bl	8000e18 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e143      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x23a>
 8002294:	e01a      	b.n	80022cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_RCC_OscConfig+0x280>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7fe fdb9 	bl	8000e18 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe fdb5 	bl	8000e18 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d903      	bls.n	80022c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e129      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
 80022bc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b95      	ldr	r3, [pc, #596]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a4 	beq.w	8002422 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b8c      	ldr	r3, [pc, #560]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a8b      	ldr	r2, [pc, #556]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002302:	4b86      	ldr	r3, [pc, #536]	; (800251c <HAL_RCC_OscConfig+0x4e0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800230e:	4b83      	ldr	r3, [pc, #524]	; (800251c <HAL_RCC_OscConfig+0x4e0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a82      	ldr	r2, [pc, #520]	; (800251c <HAL_RCC_OscConfig+0x4e0>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe fd7d 	bl	8000e18 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fd79 	bl	8000e18 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0ed      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002334:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCC_OscConfig+0x4e0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x31a>
 8002348:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e02d      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x33c>
 800235e:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a6d      	ldr	r2, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	e01c      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x35e>
 8002380:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a64      	ldr	r2, [pc, #400]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4a61      	ldr	r2, [pc, #388]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	; 0x70
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a5b      	ldr	r2, [pc, #364]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fd2d 	bl	8000e18 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fd29 	bl	8000e18 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e09b      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ee      	beq.n	80023c2 <HAL_RCC_OscConfig+0x386>
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fd17 	bl	8000e18 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fd13 	bl	8000e18 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e085      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ee      	bne.n	80023ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800241c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d071      	beq.n	800250e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d069      	beq.n	800250a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d14b      	bne.n	80024d6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a35      	ldr	r2, [pc, #212]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fce5 	bl	8000e18 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fce1 	bl	8000e18 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e055      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	071b      	lsls	r3, r3, #28
 800249c:	491e      	ldr	r1, [pc, #120]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fcb3 	bl	8000e18 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fcaf 	bl	8000e18 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e023      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x47a>
 80024d4:	e01b      	b.n	800250e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fc99 	bl	8000e18 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fc95 	bl	8000e18 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x4dc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x4ae>
 8002508:	e001      	b.n	800250e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40007000 	.word	0x40007000

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0ce      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b69      	ldr	r3, [pc, #420]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	4964      	ldr	r1, [pc, #400]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b6      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494c      	ldr	r1, [pc, #304]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d040      	beq.n	8002644 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07d      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e071      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e069      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002614:	f7fe fc00 	bl	8000e18 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fbfc 	bl	8000e18 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e051      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d210      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 020f 	bic.w	r2, r3, #15
 800265a:	4921      	ldr	r1, [pc, #132]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e030      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4915      	ldr	r1, [pc, #84]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490d      	ldr	r1, [pc, #52]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f81d 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_RCC_ClockConfig+0x1cc>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fb5e 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	0800453c 	.word	0x0800453c
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d007      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x32>
 8002712:	2b08      	cmp	r3, #8
 8002714:	d008      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x38>
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80b4 	bne.w	8002884 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800271e:	60bb      	str	r3, [r7, #8]
       break;
 8002720:	e0b3      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002722:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002724:	60bb      	str	r3, [r7, #8]
      break;
 8002726:	e0b0      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002728:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002730:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04a      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	f04f 0400 	mov.w	r4, #0
 8002748:	f240 11ff 	movw	r1, #511	; 0x1ff
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	ea03 0501 	and.w	r5, r3, r1
 8002754:	ea04 0602 	and.w	r6, r4, r2
 8002758:	4629      	mov	r1, r5
 800275a:	4632      	mov	r2, r6
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f04f 0400 	mov.w	r4, #0
 8002764:	0154      	lsls	r4, r2, #5
 8002766:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800276a:	014b      	lsls	r3, r1, #5
 800276c:	4619      	mov	r1, r3
 800276e:	4622      	mov	r2, r4
 8002770:	1b49      	subs	r1, r1, r5
 8002772:	eb62 0206 	sbc.w	r2, r2, r6
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	0194      	lsls	r4, r2, #6
 8002780:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002784:	018b      	lsls	r3, r1, #6
 8002786:	1a5b      	subs	r3, r3, r1
 8002788:	eb64 0402 	sbc.w	r4, r4, r2
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	00e2      	lsls	r2, r4, #3
 8002796:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800279a:	00d9      	lsls	r1, r3, #3
 800279c:	460b      	mov	r3, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	195b      	adds	r3, r3, r5
 80027a2:	eb44 0406 	adc.w	r4, r4, r6
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	0262      	lsls	r2, r4, #9
 80027b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027b4:	0259      	lsls	r1, r3, #9
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	4621      	mov	r1, r4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	f7fd fd36 	bl	8000238 <__aeabi_uldivmod>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e049      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	f04f 0400 	mov.w	r4, #0
 80027de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	ea03 0501 	and.w	r5, r3, r1
 80027ea:	ea04 0602 	and.w	r6, r4, r2
 80027ee:	4629      	mov	r1, r5
 80027f0:	4632      	mov	r2, r6
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	f04f 0400 	mov.w	r4, #0
 80027fa:	0154      	lsls	r4, r2, #5
 80027fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002800:	014b      	lsls	r3, r1, #5
 8002802:	4619      	mov	r1, r3
 8002804:	4622      	mov	r2, r4
 8002806:	1b49      	subs	r1, r1, r5
 8002808:	eb62 0206 	sbc.w	r2, r2, r6
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f04f 0400 	mov.w	r4, #0
 8002814:	0194      	lsls	r4, r2, #6
 8002816:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800281a:	018b      	lsls	r3, r1, #6
 800281c:	1a5b      	subs	r3, r3, r1
 800281e:	eb64 0402 	sbc.w	r4, r4, r2
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	00e2      	lsls	r2, r4, #3
 800282c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002830:	00d9      	lsls	r1, r3, #3
 8002832:	460b      	mov	r3, r1
 8002834:	4614      	mov	r4, r2
 8002836:	195b      	adds	r3, r3, r5
 8002838:	eb44 0406 	adc.w	r4, r4, r6
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	02a2      	lsls	r2, r4, #10
 8002846:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800284a:	0299      	lsls	r1, r3, #10
 800284c:	460b      	mov	r3, r1
 800284e:	4614      	mov	r4, r2
 8002850:	4618      	mov	r0, r3
 8002852:	4621      	mov	r1, r4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	461a      	mov	r2, r3
 800285c:	4623      	mov	r3, r4
 800285e:	f7fd fceb 	bl	8000238 <__aeabi_uldivmod>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	60bb      	str	r3, [r7, #8]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002886:	60bb      	str	r3, [r7, #8]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	68bb      	ldr	r3, [r7, #8]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4601      	mov	r1, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	0800454c 	.word	0x0800454c

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e4:	f7ff ffdc 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	0800454c 	.word	0x0800454c

08002908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800293a:	6093      	str	r3, [r2, #8]
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	4964      	ldr	r1, [pc, #400]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d017      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002962:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	4959      	ldr	r1, [pc, #356]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002980:	d101      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d017      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800299e:	4b4e      	ldr	r3, [pc, #312]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	494a      	ldr	r1, [pc, #296]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 808b 	beq.w	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6413      	str	r3, [r2, #64]	; 0x40
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a34      	ldr	r2, [pc, #208]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fa02 	bl	8000e18 <HAL_GetTick>
 8002a14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe f9fe 	bl	8000e18 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e38d      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d035      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d02e      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d114      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe f9c6 	bl	8000e18 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe f9c2 	bl	8000e18 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e34f      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ace:	400b      	ands	r3, r1
 8002ad0:	4901      	ldr	r1, [pc, #4]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	0ffffcff 	.word	0x0ffffcff
 8002ae4:	4bb3      	ldr	r3, [pc, #716]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4ab2      	ldr	r2, [pc, #712]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	4bb0      	ldr	r3, [pc, #704]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	49ad      	ldr	r1, [pc, #692]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b0e:	4ba9      	ldr	r3, [pc, #676]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	4aa7      	ldr	r2, [pc, #668]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	49a2      	ldr	r1, [pc, #648]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3c:	4b9d      	ldr	r3, [pc, #628]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b4a:	499a      	ldr	r1, [pc, #616]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5e:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	4991      	ldr	r1, [pc, #580]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b80:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	4989      	ldr	r1, [pc, #548]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ba2:	4b84      	ldr	r3, [pc, #528]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4980      	ldr	r1, [pc, #512]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc4:	4b7b      	ldr	r3, [pc, #492]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4978      	ldr	r1, [pc, #480]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f023 020c 	bic.w	r2, r3, #12
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf4:	496f      	ldr	r1, [pc, #444]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4967      	ldr	r1, [pc, #412]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c2a:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c38:	495e      	ldr	r1, [pc, #376]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	4956      	ldr	r1, [pc, #344]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	4945      	ldr	r1, [pc, #276]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	493c      	ldr	r1, [pc, #240]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce2:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d011      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d04:	492b      	ldr	r1, [pc, #172]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d14:	d101      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	491b      	ldr	r1, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d68:	4912      	ldr	r1, [pc, #72]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8c:	4909      	ldr	r1, [pc, #36]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	4985      	ldr	r1, [pc, #532]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dcc:	4b80      	ldr	r3, [pc, #512]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ddc:	497c      	ldr	r1, [pc, #496]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df2:	f040 80d6 	bne.w	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe f809 	bl	8000e18 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e0a:	f7fe f805 	bl	8000e18 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e194      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e1c:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11d      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e3c:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e4a:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e50:	0e1b      	lsrs	r3, r3, #24
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	019a      	lsls	r2, r3, #6
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	071b      	lsls	r3, r3, #28
 8002e70:	4957      	ldr	r1, [pc, #348]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02e      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea2:	d129      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb8:	0f1b      	lsrs	r3, r3, #28
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	019a      	lsls	r2, r3, #6
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	071b      	lsls	r3, r3, #28
 8002ed8:	493d      	ldr	r1, [pc, #244]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee6:	f023 021f 	bic.w	r2, r3, #31
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4937      	ldr	r1, [pc, #220]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0a:	0e1b      	lsrs	r3, r3, #24
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f18:	0f1b      	lsrs	r3, r3, #28
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	019a      	lsls	r2, r3, #6
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	071b      	lsls	r3, r3, #28
 8002f38:	4925      	ldr	r1, [pc, #148]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d011      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	019a      	lsls	r2, r3, #6
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	061b      	lsls	r3, r3, #24
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	071b      	lsls	r3, r3, #28
 8002f68:	4919      	ldr	r1, [pc, #100]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fd ff4c 	bl	8000e18 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f84:	f7fd ff48 	bl	8000e18 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0d7      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	f040 80cd 	bne.w	8003144 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb6:	f7fd ff2f 	bl	8000e18 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fbe:	f7fd ff2b 	bl	8000e18 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	; 0x64
 8002fca:	d903      	bls.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0ba      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002fd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd4:	4b5e      	ldr	r3, [pc, #376]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe0:	d0ed      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02e      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d12a      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800300a:	4b51      	ldr	r3, [pc, #324]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003018:	4b4d      	ldr	r3, [pc, #308]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	0f1b      	lsrs	r3, r3, #28
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	019a      	lsls	r2, r3, #6
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	071b      	lsls	r3, r3, #28
 800303e:	4944      	ldr	r1, [pc, #272]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003046:	4b42      	ldr	r3, [pc, #264]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	493d      	ldr	r1, [pc, #244]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d022      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003074:	d11d      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	0e1b      	lsrs	r3, r3, #24
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003084:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	0f1b      	lsrs	r3, r3, #28
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	019a      	lsls	r2, r3, #6
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d028      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	4917      	ldr	r1, [pc, #92]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fd fe7c 	bl	8000e18 <HAL_GetTick>
 8003120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003124:	f7fd fe78 	bl	8000e18 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e007      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800313e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003142:	d1ef      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800

08003154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e040      	b.n	80031e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fcd0 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f82c 	bl	80031f0 <UART_SetConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e022      	b.n	80031e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fac4 	bl	8003738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ce:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fb4b 	bl	800387c <UART_CheckIdleState>
 80031e6:	4603      	mov	r3, r0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4bb1      	ldr	r3, [pc, #708]	; (80034e4 <UART_SetConfig+0x2f4>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	430b      	orrs	r3, r1
 800322a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a9f      	ldr	r2, [pc, #636]	; (80034e8 <UART_SetConfig+0x2f8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d121      	bne.n	80032b4 <UART_SetConfig+0xc4>
 8003270:	4b9e      	ldr	r3, [pc, #632]	; (80034ec <UART_SetConfig+0x2fc>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d816      	bhi.n	80032ac <UART_SetConfig+0xbc>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <UART_SetConfig+0x94>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a1 	.word	0x080032a1
 800328c:	0800329b 	.word	0x0800329b
 8003290:	080032a7 	.word	0x080032a7
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e151      	b.n	800353e <UART_SetConfig+0x34e>
 800329a:	2302      	movs	r3, #2
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e14e      	b.n	800353e <UART_SetConfig+0x34e>
 80032a0:	2304      	movs	r3, #4
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e14b      	b.n	800353e <UART_SetConfig+0x34e>
 80032a6:	2308      	movs	r3, #8
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e148      	b.n	800353e <UART_SetConfig+0x34e>
 80032ac:	2310      	movs	r3, #16
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	bf00      	nop
 80032b2:	e144      	b.n	800353e <UART_SetConfig+0x34e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a8d      	ldr	r2, [pc, #564]	; (80034f0 <UART_SetConfig+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d134      	bne.n	8003328 <UART_SetConfig+0x138>
 80032be:	4b8b      	ldr	r3, [pc, #556]	; (80034ec <UART_SetConfig+0x2fc>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d829      	bhi.n	8003320 <UART_SetConfig+0x130>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0xe4>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003321 	.word	0x08003321
 80032dc:	08003321 	.word	0x08003321
 80032e0:	08003321 	.word	0x08003321
 80032e4:	08003315 	.word	0x08003315
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003321 	.word	0x08003321
 80032f4:	0800330f 	.word	0x0800330f
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003321 	.word	0x08003321
 8003304:	0800331b 	.word	0x0800331b
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e117      	b.n	800353e <UART_SetConfig+0x34e>
 800330e:	2302      	movs	r3, #2
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e114      	b.n	800353e <UART_SetConfig+0x34e>
 8003314:	2304      	movs	r3, #4
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e111      	b.n	800353e <UART_SetConfig+0x34e>
 800331a:	2308      	movs	r3, #8
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e10e      	b.n	800353e <UART_SetConfig+0x34e>
 8003320:	2310      	movs	r3, #16
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	bf00      	nop
 8003326:	e10a      	b.n	800353e <UART_SetConfig+0x34e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a71      	ldr	r2, [pc, #452]	; (80034f4 <UART_SetConfig+0x304>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d120      	bne.n	8003374 <UART_SetConfig+0x184>
 8003332:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <UART_SetConfig+0x2fc>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800333c:	2b10      	cmp	r3, #16
 800333e:	d00f      	beq.n	8003360 <UART_SetConfig+0x170>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d802      	bhi.n	800334a <UART_SetConfig+0x15a>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <UART_SetConfig+0x164>
 8003348:	e010      	b.n	800336c <UART_SetConfig+0x17c>
 800334a:	2b20      	cmp	r3, #32
 800334c:	d005      	beq.n	800335a <UART_SetConfig+0x16a>
 800334e:	2b30      	cmp	r3, #48	; 0x30
 8003350:	d009      	beq.n	8003366 <UART_SetConfig+0x176>
 8003352:	e00b      	b.n	800336c <UART_SetConfig+0x17c>
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0f1      	b.n	800353e <UART_SetConfig+0x34e>
 800335a:	2302      	movs	r3, #2
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0ee      	b.n	800353e <UART_SetConfig+0x34e>
 8003360:	2304      	movs	r3, #4
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0eb      	b.n	800353e <UART_SetConfig+0x34e>
 8003366:	2308      	movs	r3, #8
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e0e8      	b.n	800353e <UART_SetConfig+0x34e>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	bf00      	nop
 8003372:	e0e4      	b.n	800353e <UART_SetConfig+0x34e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5f      	ldr	r2, [pc, #380]	; (80034f8 <UART_SetConfig+0x308>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d120      	bne.n	80033c0 <UART_SetConfig+0x1d0>
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <UART_SetConfig+0x2fc>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d00f      	beq.n	80033ac <UART_SetConfig+0x1bc>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d802      	bhi.n	8003396 <UART_SetConfig+0x1a6>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <UART_SetConfig+0x1b0>
 8003394:	e010      	b.n	80033b8 <UART_SetConfig+0x1c8>
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d005      	beq.n	80033a6 <UART_SetConfig+0x1b6>
 800339a:	2bc0      	cmp	r3, #192	; 0xc0
 800339c:	d009      	beq.n	80033b2 <UART_SetConfig+0x1c2>
 800339e:	e00b      	b.n	80033b8 <UART_SetConfig+0x1c8>
 80033a0:	2300      	movs	r3, #0
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0cb      	b.n	800353e <UART_SetConfig+0x34e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e0c8      	b.n	800353e <UART_SetConfig+0x34e>
 80033ac:	2304      	movs	r3, #4
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e0c5      	b.n	800353e <UART_SetConfig+0x34e>
 80033b2:	2308      	movs	r3, #8
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e0c2      	b.n	800353e <UART_SetConfig+0x34e>
 80033b8:	2310      	movs	r3, #16
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	bf00      	nop
 80033be:	e0be      	b.n	800353e <UART_SetConfig+0x34e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a4d      	ldr	r2, [pc, #308]	; (80034fc <UART_SetConfig+0x30c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d124      	bne.n	8003414 <UART_SetConfig+0x224>
 80033ca:	4b48      	ldr	r3, [pc, #288]	; (80034ec <UART_SetConfig+0x2fc>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d012      	beq.n	8003400 <UART_SetConfig+0x210>
 80033da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033de:	d802      	bhi.n	80033e6 <UART_SetConfig+0x1f6>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <UART_SetConfig+0x204>
 80033e4:	e012      	b.n	800340c <UART_SetConfig+0x21c>
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d006      	beq.n	80033fa <UART_SetConfig+0x20a>
 80033ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f0:	d009      	beq.n	8003406 <UART_SetConfig+0x216>
 80033f2:	e00b      	b.n	800340c <UART_SetConfig+0x21c>
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e0a1      	b.n	800353e <UART_SetConfig+0x34e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e09e      	b.n	800353e <UART_SetConfig+0x34e>
 8003400:	2304      	movs	r3, #4
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e09b      	b.n	800353e <UART_SetConfig+0x34e>
 8003406:	2308      	movs	r3, #8
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e098      	b.n	800353e <UART_SetConfig+0x34e>
 800340c:	2310      	movs	r3, #16
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	bf00      	nop
 8003412:	e094      	b.n	800353e <UART_SetConfig+0x34e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a39      	ldr	r2, [pc, #228]	; (8003500 <UART_SetConfig+0x310>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d124      	bne.n	8003468 <UART_SetConfig+0x278>
 800341e:	4b33      	ldr	r3, [pc, #204]	; (80034ec <UART_SetConfig+0x2fc>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d012      	beq.n	8003454 <UART_SetConfig+0x264>
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d802      	bhi.n	800343a <UART_SetConfig+0x24a>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <UART_SetConfig+0x258>
 8003438:	e012      	b.n	8003460 <UART_SetConfig+0x270>
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d006      	beq.n	800344e <UART_SetConfig+0x25e>
 8003440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003444:	d009      	beq.n	800345a <UART_SetConfig+0x26a>
 8003446:	e00b      	b.n	8003460 <UART_SetConfig+0x270>
 8003448:	2301      	movs	r3, #1
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e077      	b.n	800353e <UART_SetConfig+0x34e>
 800344e:	2302      	movs	r3, #2
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e074      	b.n	800353e <UART_SetConfig+0x34e>
 8003454:	2304      	movs	r3, #4
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e071      	b.n	800353e <UART_SetConfig+0x34e>
 800345a:	2308      	movs	r3, #8
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e06e      	b.n	800353e <UART_SetConfig+0x34e>
 8003460:	2310      	movs	r3, #16
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	bf00      	nop
 8003466:	e06a      	b.n	800353e <UART_SetConfig+0x34e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a25      	ldr	r2, [pc, #148]	; (8003504 <UART_SetConfig+0x314>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d124      	bne.n	80034bc <UART_SetConfig+0x2cc>
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <UART_SetConfig+0x2fc>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d012      	beq.n	80034a8 <UART_SetConfig+0x2b8>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d802      	bhi.n	800348e <UART_SetConfig+0x29e>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <UART_SetConfig+0x2ac>
 800348c:	e012      	b.n	80034b4 <UART_SetConfig+0x2c4>
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d006      	beq.n	80034a2 <UART_SetConfig+0x2b2>
 8003494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003498:	d009      	beq.n	80034ae <UART_SetConfig+0x2be>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x2c4>
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e04d      	b.n	800353e <UART_SetConfig+0x34e>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e04a      	b.n	800353e <UART_SetConfig+0x34e>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e047      	b.n	800353e <UART_SetConfig+0x34e>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e044      	b.n	800353e <UART_SetConfig+0x34e>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	bf00      	nop
 80034ba:	e040      	b.n	800353e <UART_SetConfig+0x34e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <UART_SetConfig+0x318>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d139      	bne.n	800353a <UART_SetConfig+0x34a>
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <UART_SetConfig+0x2fc>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d4:	d027      	beq.n	8003526 <UART_SetConfig+0x336>
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034da:	d817      	bhi.n	800350c <UART_SetConfig+0x31c>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01c      	beq.n	800351a <UART_SetConfig+0x32a>
 80034e0:	e027      	b.n	8003532 <UART_SetConfig+0x342>
 80034e2:	bf00      	nop
 80034e4:	efff69f3 	.word	0xefff69f3
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40004800 	.word	0x40004800
 80034f8:	40004c00 	.word	0x40004c00
 80034fc:	40005000 	.word	0x40005000
 8003500:	40011400 	.word	0x40011400
 8003504:	40007800 	.word	0x40007800
 8003508:	40007c00 	.word	0x40007c00
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	d006      	beq.n	8003520 <UART_SetConfig+0x330>
 8003512:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003516:	d009      	beq.n	800352c <UART_SetConfig+0x33c>
 8003518:	e00b      	b.n	8003532 <UART_SetConfig+0x342>
 800351a:	2300      	movs	r3, #0
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e00e      	b.n	800353e <UART_SetConfig+0x34e>
 8003520:	2302      	movs	r3, #2
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e00b      	b.n	800353e <UART_SetConfig+0x34e>
 8003526:	2304      	movs	r3, #4
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e008      	b.n	800353e <UART_SetConfig+0x34e>
 800352c:	2308      	movs	r3, #8
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e005      	b.n	800353e <UART_SetConfig+0x34e>
 8003532:	2310      	movs	r3, #16
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	bf00      	nop
 8003538:	e001      	b.n	800353e <UART_SetConfig+0x34e>
 800353a:	2310      	movs	r3, #16
 800353c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d17c      	bne.n	8003642 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	2b08      	cmp	r3, #8
 800354c:	d859      	bhi.n	8003602 <UART_SetConfig+0x412>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x364>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003579 	.word	0x08003579
 8003558:	08003597 	.word	0x08003597
 800355c:	080035b5 	.word	0x080035b5
 8003560:	08003603 	.word	0x08003603
 8003564:	080035cd 	.word	0x080035cd
 8003568:	08003603 	.word	0x08003603
 800356c:	08003603 	.word	0x08003603
 8003570:	08003603 	.word	0x08003603
 8003574:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003578:	f7ff f99e 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 800357c:	4603      	mov	r3, r0
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	441a      	add	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	61bb      	str	r3, [r7, #24]
        break;
 8003594:	e038      	b.n	8003608 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003596:	f7ff f9a3 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 800359a:	4603      	mov	r3, r0
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	61bb      	str	r3, [r7, #24]
        break;
 80035b2:	e029      	b.n	8003608 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	085a      	lsrs	r2, r3, #1
 80035ba:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <UART_SetConfig+0x540>)
 80035bc:	4413      	add	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6852      	ldr	r2, [r2, #4]
 80035c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	61bb      	str	r3, [r7, #24]
        break;
 80035ca:	e01d      	b.n	8003608 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035cc:	f7ff f890 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80035d0:	4603      	mov	r3, r0
 80035d2:	005a      	lsls	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	61bb      	str	r3, [r7, #24]
        break;
 80035e8:	e00e      	b.n	8003608 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	61bb      	str	r3, [r7, #24]
        break;
 8003600:	e002      	b.n	8003608 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
        break;
 8003606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	d916      	bls.n	800363c <UART_SetConfig+0x44c>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d212      	bcs.n	800363c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f023 030f 	bic.w	r3, r3, #15
 800361e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	b29a      	uxth	r2, r3
 800362c:	89fb      	ldrh	r3, [r7, #14]
 800362e:	4313      	orrs	r3, r2
 8003630:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	89fa      	ldrh	r2, [r7, #14]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e06e      	b.n	800371a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
 8003640:	e06b      	b.n	800371a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003642:	7ffb      	ldrb	r3, [r7, #31]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d857      	bhi.n	80036f8 <UART_SetConfig+0x508>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x460>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003675 	.word	0x08003675
 8003654:	08003691 	.word	0x08003691
 8003658:	080036ad 	.word	0x080036ad
 800365c:	080036f9 	.word	0x080036f9
 8003660:	080036c5 	.word	0x080036c5
 8003664:	080036f9 	.word	0x080036f9
 8003668:	080036f9 	.word	0x080036f9
 800366c:	080036f9 	.word	0x080036f9
 8003670:	080036e1 	.word	0x080036e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003674:	f7ff f920 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	61bb      	str	r3, [r7, #24]
        break;
 800368e:	e036      	b.n	80036fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003690:	f7ff f926 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003694:	4602      	mov	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	61bb      	str	r3, [r7, #24]
        break;
 80036aa:	e028      	b.n	80036fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	085a      	lsrs	r2, r3, #1
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <UART_SetConfig+0x544>)
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	61bb      	str	r3, [r7, #24]
        break;
 80036c2:	e01c      	b.n	80036fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036c4:	f7ff f814 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	441a      	add	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	b29b      	uxth	r3, r3
 80036dc:	61bb      	str	r3, [r7, #24]
        break;
 80036de:	e00e      	b.n	80036fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	61bb      	str	r3, [r7, #24]
        break;
 80036f6:	e002      	b.n	80036fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	75fb      	strb	r3, [r7, #23]
        break;
 80036fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d908      	bls.n	8003716 <UART_SetConfig+0x526>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d204      	bcs.n	8003716 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e001      	b.n	800371a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	01e84800 	.word	0x01e84800
 8003734:	00f42400 	.word	0x00f42400

08003738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01a      	beq.n	800384e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d10a      	bne.n	800384e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800388a:	f7fd fac5 	bl	8000e18 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10e      	bne.n	80038bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f814 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e00a      	b.n	80038d2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	e02a      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d026      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fd fa90 	bl	8000e18 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11b      	bne.n	8003942 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e00f      	b.n	8003962 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d0c5      	beq.n	80038ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800396c:	b084      	sub	sp, #16
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	f107 001c 	add.w	r0, r7, #28
 800397a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	d120      	bne.n	80039c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <USB_CoreInit+0xac>)
 8003996:	4013      	ands	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa60 	bl	8003e80 <USB_CoreReset>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e010      	b.n	80039e8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa54 	bl	8003e80 <USB_CoreReset>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10b      	bne.n	8003a06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f043 0206 	orr.w	r2, r3, #6
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a12:	b004      	add	sp, #16
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	ffbdffbf 	.word	0xffbdffbf

08003a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 0201 	bic.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e00b      	b.n	8003a82 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	e001      	b.n	8003a82 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e003      	b.n	8003a8a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003a82:	2032      	movs	r0, #50	; 0x32
 8003a84:	f7fd f9d4 	bl	8000e30 <HAL_Delay>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e009      	b.n	8003ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3340      	adds	r3, #64	; 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0e      	cmp	r3, #14
 8003acc:	d9f2      	bls.n	8003ab4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d112      	bne.n	8003afa <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e005      	b.n	8003b06 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b18:	4619      	mov	r1, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	461a      	mov	r2, r3
 8003b22:	680b      	ldr	r3, [r1, #0]
 8003b24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10c      	bne.n	8003b46 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b32:	2100      	movs	r1, #0
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f971 	bl	8003e1c <USB_SetDevSpeed>
 8003b3a:	e018      	b.n	8003b6e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f96c 	bl	8003e1c <USB_SetDevSpeed>
 8003b44:	e013      	b.n	8003b6e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10c      	bne.n	8003b66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b52:	2100      	movs	r1, #0
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f961 	bl	8003e1c <USB_SetDevSpeed>
 8003b5a:	e008      	b.n	8003b6e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f95c 	bl	8003e1c <USB_SetDevSpeed>
 8003b64:	e003      	b.n	8003b6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b66:	2103      	movs	r1, #3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f957 	bl	8003e1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b6e:	2110      	movs	r1, #16
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f90b 	bl	8003d8c <USB_FlushTxFifo>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f929 	bl	8003dd8 <USB_FlushRxFifo>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e043      	b.n	8003c42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd0:	d118      	bne.n	8003c04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e013      	b.n	8003c16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e008      	b.n	8003c16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	461a      	mov	r2, r3
 8003c12:	2300      	movs	r3, #0
 8003c14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	461a      	mov	r2, r3
 8003c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d3b7      	bcc.n	8003bba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e043      	b.n	8003cd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c66:	d118      	bne.n	8003c9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e013      	b.n	8003cac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e008      	b.n	8003cac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3b7      	bcc.n	8003c50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d110      	bne.n	8003d1c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <USB_DevInit+0x2e8>)
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	4619      	mov	r1, r3
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <USB_DevInit+0x2ec>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f043 0210 	orr.w	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <USB_DevInit+0x2f0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <USB_DevInit+0x2f4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d78:	b004      	add	sp, #16
 8003d7a:	4770      	bx	lr
 8003d7c:	00800100 	.word	0x00800100
 8003d80:	00010003 	.word	0x00010003
 8003d84:	803c3800 	.word	0x803c3800
 8003d88:	40000004 	.word	0x40000004

08003d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <USB_FlushTxFifo+0x48>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d0f0      	beq.n	8003da6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	00030d40 	.word	0x00030d40

08003dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2210      	movs	r2, #16
 8003de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <USB_FlushRxFifo+0x40>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d0f0      	beq.n	8003dea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	00030d40 	.word	0x00030d40

08003e1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003e6e:	2003      	movs	r0, #3
 8003e70:	f7fc ffde 	bl	8000e30 <HAL_Delay>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <USB_CoreReset+0x64>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e01b      	b.n	8003ed6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	daf2      	bge.n	8003e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <USB_CoreReset+0x64>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d0f0      	beq.n	8003eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	00030d40 	.word	0x00030d40

08003ee8 <CLK_PIN_SET>:
  0x71,    // F 0b01110001
  0x40,    // - 0b01000000
  0x00     // nothing 0b00000000
  };

void CLK_PIN_SET(void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, CLK_PIN, GPIO_PIN_SET); // CLK SET
 8003eec:	2201      	movs	r2, #1
 8003eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef2:	4802      	ldr	r0, [pc, #8]	; (8003efc <CLK_PIN_SET+0x14>)
 8003ef4:	f7fd fed2 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40020400 	.word	0x40020400

08003f00 <CLK_PIN_RESET>:

void CLK_PIN_RESET(void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, CLK_PIN, GPIO_PIN_RESET); // CLK RESET
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f0a:	4802      	ldr	r0, [pc, #8]	; (8003f14 <CLK_PIN_RESET+0x14>)
 8003f0c:	f7fd fec6 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40020400 	.word	0x40020400

08003f18 <DATA_PIN_SET>:

void DATA_PIN_SET(void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_SET); // DATA SET
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f22:	4802      	ldr	r0, [pc, #8]	; (8003f2c <DATA_PIN_SET+0x14>)
 8003f24:	f7fd feba 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40020400 	.word	0x40020400

08003f30 <DATA_PIN_RESET>:

void DATA_PIN_RESET(void) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_RESET); // DATA RESET
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f3a:	4802      	ldr	r0, [pc, #8]	; (8003f44 <DATA_PIN_RESET+0x14>)
 8003f3c:	f7fd feae 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40020400 	.word	0x40020400

08003f48 <DATA_PIN_READ>:

void DATA_PIN_READ(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_ReadPin(TM1637_PORT, DATA_PIN); // DATA READ
 8003f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <DATA_PIN_READ+0x14>)
 8003f52:	f7fd fe8b 	bl	8001c6c <HAL_GPIO_ReadPin>
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40020400 	.word	0x40020400

08003f60 <tik_delay>:

/**
  * @brief  Delay function
  * @retval void
  */
void tik_delay(uint32_t i) {
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	for (int j=0;j<i;j++){
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e003      	b.n	8003f76 <tik_delay+0x16>
		__NOP();
 8003f6e:	bf00      	nop
	for (int j=0;j<i;j++){
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d8f7      	bhi.n	8003f6e <tik_delay+0xe>
	}
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <TM1637_Generate_START>:
/**
  * @brief  signal to start the communication protocol
  * @retval void
  */
void TM1637_Generate_START(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, CLK_PIN, GPIO_PIN_SET);
 8003f90:	2201      	movs	r2, #1
 8003f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f96:	480a      	ldr	r0, [pc, #40]	; (8003fc0 <TM1637_Generate_START+0x34>)
 8003f98:	f7fd fe80 	bl	8001c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_SET);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fa2:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <TM1637_Generate_START+0x34>)
 8003fa4:	f7fd fe7a 	bl	8001c9c <HAL_GPIO_WritePin>
	tik_delay(TM1637_DELAY);
 8003fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fac:	f7ff ffd8 	bl	8003f60 <tik_delay>
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_RESET);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fb6:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <TM1637_Generate_START+0x34>)
 8003fb8:	f7fd fe70 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40020400 	.word	0x40020400

08003fc4 <TM1637_Generate_STOP>:
/**
  * @brief  signal to stop the communication protocol
  * @retval void
  */
void TM1637_Generate_STOP(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_PORT, CLK_PIN, GPIO_PIN_RESET); // CLK RESET
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fce:	4811      	ldr	r0, [pc, #68]	; (8004014 <TM1637_Generate_STOP+0x50>)
 8003fd0:	f7fd fe64 	bl	8001c9c <HAL_GPIO_WritePin>
	tik_delay(TM1637_DELAY);
 8003fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd8:	f7ff ffc2 	bl	8003f60 <tik_delay>
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_RESET); // DATA RESET
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fe2:	480c      	ldr	r0, [pc, #48]	; (8004014 <TM1637_Generate_STOP+0x50>)
 8003fe4:	f7fd fe5a 	bl	8001c9c <HAL_GPIO_WritePin>
	tik_delay(TM1637_DELAY);
 8003fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fec:	f7ff ffb8 	bl	8003f60 <tik_delay>
	HAL_GPIO_WritePin(TM1637_PORT, CLK_PIN, GPIO_PIN_SET); // CLK SET
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff6:	4807      	ldr	r0, [pc, #28]	; (8004014 <TM1637_Generate_STOP+0x50>)
 8003ff8:	f7fd fe50 	bl	8001c9c <HAL_GPIO_WritePin>
	tik_delay(TM1637_DELAY);
 8003ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004000:	f7ff ffae 	bl	8003f60 <tik_delay>
	HAL_GPIO_WritePin(TM1637_PORT, DATA_PIN, GPIO_PIN_SET); // DATA SET
 8004004:	2201      	movs	r2, #1
 8004006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800400a:	4802      	ldr	r0, [pc, #8]	; (8004014 <TM1637_Generate_STOP+0x50>)
 800400c:	f7fd fe46 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40020400 	.word	0x40020400

08004018 <TM1637_WriteData>:
/**
  * @brief  sending data to tm1637 module
  * @retval void
  */
void TM1637_WriteData(uint8_t data){
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
    for(i=0;i<8;i++) {
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e01b      	b.n	8004060 <TM1637_WriteData+0x48>
    	CLK_PIN_RESET();
 8004028:	f7ff ff6a 	bl	8003f00 <CLK_PIN_RESET>
    	if(data & 0x01){
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <TM1637_WriteData+0x24>
    		DATA_PIN_SET();
 8004036:	f7ff ff6f 	bl	8003f18 <DATA_PIN_SET>
 800403a:	e001      	b.n	8004040 <TM1637_WriteData+0x28>
    	}
    	else {
    		DATA_PIN_RESET();
 800403c:	f7ff ff78 	bl	8003f30 <DATA_PIN_RESET>
    	}
    	tik_delay(TM1637_DELAY);
 8004040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004044:	f7ff ff8c 	bl	8003f60 <tik_delay>
    	data = data>>1;
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	71fb      	strb	r3, [r7, #7]
    	CLK_PIN_SET();
 800404e:	f7ff ff4b 	bl	8003ee8 <CLK_PIN_SET>
    	tik_delay(TM1637_DELAY);
 8004052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004056:	f7ff ff83 	bl	8003f60 <tik_delay>
    for(i=0;i<8;i++) {
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	3301      	adds	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b07      	cmp	r3, #7
 8004064:	d9e0      	bls.n	8004028 <TM1637_WriteData+0x10>
    }
    CLK_PIN_RESET();
 8004066:	f7ff ff4b 	bl	8003f00 <CLK_PIN_RESET>
	tik_delay(TM1637_DELAY);	
 800406a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800406e:	f7ff ff77 	bl	8003f60 <tik_delay>
	DATA_PIN_RESET();
 8004072:	f7ff ff5d 	bl	8003f30 <DATA_PIN_RESET>
	DATA_PIN_READ();
 8004076:	f7ff ff67 	bl	8003f48 <DATA_PIN_READ>
	DATA_PIN_SET();
 800407a:	f7ff ff4d 	bl	8003f18 <DATA_PIN_SET>
	CLK_PIN_SET();
 800407e:	f7ff ff33 	bl	8003ee8 <CLK_PIN_SET>
	tik_delay(TM1637_DELAY);
 8004082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004086:	f7ff ff6b 	bl	8003f60 <tik_delay>
	CLK_PIN_RESET();
 800408a:	f7ff ff39 	bl	8003f00 <CLK_PIN_RESET>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <TM1637_coding>:
/**
  * @brief  меняем число  на его позицию  в массиве digitToSegment
  * @retval int8_t
  */
int8_t TM1637_coding(uint8_t DispData)// шифратор знакомест
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
	uint8_t PointData;
	if(PointFlag == POINT_ON)PointData = 0x80;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <TM1637_coding+0x44>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d102      	bne.n	80040b0 <TM1637_coding+0x18>
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	73fb      	strb	r3, [r7, #15]
 80040ae:	e001      	b.n	80040b4 <TM1637_coding+0x1c>
	else PointData = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
	if(DispData == 0x7f) DispData = 0x00 + PointData;
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b7f      	cmp	r3, #127	; 0x7f
 80040b8:	d102      	bne.n	80040c0 <TM1637_coding+0x28>
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	71fb      	strb	r3, [r7, #7]
 80040be:	e005      	b.n	80040cc <TM1637_coding+0x34>
	else DispData = digitToSegment[DispData] + PointData;
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <TM1637_coding+0x48>)
 80040c4:	5cd2      	ldrb	r2, [r2, r3]
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	4413      	add	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
	return DispData;
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}		
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000000a 	.word	0x2000000a
 80040e0:	08004554 	.word	0x08004554

080040e4 <TM1637_coding_all>:
/**
  * @brief  меняем числа в массиве DispData на их позиции в массиве digitToSegment
  * @retval void
  */
void TM1637_coding_all(uint8_t DispData[])//шифратор знакомест 
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	uint8_t PointData;
	uint8_t i;
	PointData =  PointFlag ? 0x80:0;
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <TM1637_coding_all+0xb0>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <TM1637_coding_all+0x14>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	e000      	b.n	80040fa <TM1637_coding_all+0x16>
 80040f8:	2300      	movs	r3, #0
 80040fa:	73bb      	strb	r3, [r7, #14]
	for(i = 0;i < 4;i ++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e026      	b.n	8004150 <TM1637_coding_all+0x6c>
	{
		if(DispData[i] == 0x7f)DispData[i] = 0x00;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b7f      	cmp	r3, #127	; 0x7f
 800410c:	d105      	bne.n	800411a <TM1637_coding_all+0x36>
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e00d      	b.n	8004136 <TM1637_coding_all+0x52>
		else DispData[i] = digitToSegment[DispData[i]] + PointData; 
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <TM1637_coding_all+0xb4>)
 8004126:	5c99      	ldrb	r1, [r3, r2]
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	7bba      	ldrb	r2, [r7, #14]
 8004130:	440a      	add	r2, r1
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
	DispData[i] += 0x80;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	440b      	add	r3, r1
 8004144:	3a80      	subs	r2, #128	; 0x80
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < 4;i ++)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	3301      	adds	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d9d5      	bls.n	8004102 <TM1637_coding_all+0x1e>
	}
	if((_DispType == D4056A)&&(DecPoint != 3))
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <TM1637_coding_all+0xb8>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d114      	bne.n	8004188 <TM1637_coding_all+0xa4>
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <TM1637_coding_all+0xbc>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d010      	beq.n	8004188 <TM1637_coding_all+0xa4>
	{
	DispData[DecPoint] += 0x80;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <TM1637_coding_all+0xbc>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <TM1637_coding_all+0xbc>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	440b      	add	r3, r1
 800417c:	3a80      	subs	r2, #128	; 0x80
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
	DecPoint = 3;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <TM1637_coding_all+0xbc>)
 8004184:	2203      	movs	r2, #3
 8004186:	701a      	strb	r2, [r3, #0]
	}
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	2000000a 	.word	0x2000000a
 8004198:	08004554 	.word	0x08004554
 800419c:	2000000b 	.word	0x2000000b
 80041a0:	200004f8 	.word	0x200004f8

080041a4 <separate_Digit_to_digits>:
/**
  * @brief  разбиваем число на "сегменты"
  * @retval void
  */
void separate_Digit_to_digits(int16_t Digit,uint8_t SegArray[])//разбиваем целое число на массив чисел
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	80fb      	strh	r3, [r7, #6]
	if((Digit > 9999)||(Digit < -999))return;
 80041b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f300 80d6 	bgt.w	800436a <separate_Digit_to_digits+0x1c6>
 80041be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80041c6:	f340 80d0 	ble.w	800436a <separate_Digit_to_digits+0x1c6>
	if(Digit < 0)
 80041ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da57      	bge.n	8004282 <separate_Digit_to_digits+0xde>
	{
		SegArray[0] = INDEX_NEGATIVE_SIGN;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2210      	movs	r2, #16
 80041d6:	701a      	strb	r2, [r3, #0]
		Digit = (Digit & 0x7fff);
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80041de:	80fb      	strh	r3, [r7, #6]
		SegArray[1] = Digit/100;
 80041e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e4:	4a64      	ldr	r2, [pc, #400]	; (8004378 <separate_Digit_to_digits+0x1d4>)
 80041e6:	fb82 1203 	smull	r1, r2, r2, r3
 80041ea:	1152      	asrs	r2, r2, #5
 80041ec:	17db      	asrs	r3, r3, #31
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
		Digit %= 100;
 80041fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <separate_Digit_to_digits+0x1d4>)
 8004200:	fb82 1203 	smull	r1, r2, r2, r3
 8004204:	1151      	asrs	r1, r2, #5
 8004206:	17da      	asrs	r2, r3, #31
 8004208:	1a8a      	subs	r2, r1, r2
 800420a:	2164      	movs	r1, #100	; 0x64
 800420c:	fb01 f202 	mul.w	r2, r1, r2
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
		SegArray[2] = Digit / 10;
 8004214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <separate_Digit_to_digits+0x1d8>)
 800421a:	fb82 1203 	smull	r1, r2, r2, r3
 800421e:	1092      	asrs	r2, r2, #2
 8004220:	17db      	asrs	r3, r3, #31
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	b21a      	sxth	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	3302      	adds	r3, #2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
		SegArray[3] = Digit % 10;
 800422e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004232:	4b52      	ldr	r3, [pc, #328]	; (800437c <separate_Digit_to_digits+0x1d8>)
 8004234:	fb83 1302 	smull	r1, r3, r3, r2
 8004238:	1099      	asrs	r1, r3, #2
 800423a:	17d3      	asrs	r3, r2, #31
 800423c:	1ac9      	subs	r1, r1, r3
 800423e:	460b      	mov	r3, r1
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b21a      	sxth	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	3303      	adds	r3, #3
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
		if(BlankingFlag)
 8004252:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <separate_Digit_to_digits+0x1dc>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8083 	beq.w	8004362 <separate_Digit_to_digits+0x1be>
		{
			if(SegArray[1] == 0)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d17d      	bne.n	8004362 <separate_Digit_to_digits+0x1be>
			{
				SegArray[1] = INDEX_BLANK;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
				if(SegArray[2] == 0) SegArray[2] = INDEX_BLANK;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	3302      	adds	r3, #2
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d174      	bne.n	8004362 <separate_Digit_to_digits+0x1be>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	3302      	adds	r3, #2
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e06f      	b.n	8004362 <separate_Digit_to_digits+0x1be>
			}
		}
	}
	else
	{
		SegArray[0] = Digit/1000;
 8004282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <separate_Digit_to_digits+0x1e0>)
 8004288:	fb82 1203 	smull	r1, r2, r2, r3
 800428c:	1192      	asrs	r2, r2, #6
 800428e:	17db      	asrs	r3, r3, #31
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	b21b      	sxth	r3, r3
 8004294:	b2da      	uxtb	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	701a      	strb	r2, [r3, #0]
		Digit %= 1000;
 800429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429e:	4a39      	ldr	r2, [pc, #228]	; (8004384 <separate_Digit_to_digits+0x1e0>)
 80042a0:	fb82 1203 	smull	r1, r2, r2, r3
 80042a4:	1191      	asrs	r1, r2, #6
 80042a6:	17da      	asrs	r2, r3, #31
 80042a8:	1a8a      	subs	r2, r1, r2
 80042aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042ae:	fb01 f202 	mul.w	r2, r1, r2
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
		SegArray[1] = Digit/100;
 80042b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ba:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <separate_Digit_to_digits+0x1d4>)
 80042bc:	fb82 1203 	smull	r1, r2, r2, r3
 80042c0:	1152      	asrs	r2, r2, #5
 80042c2:	17db      	asrs	r3, r3, #31
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
		Digit %= 100;
 80042d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <separate_Digit_to_digits+0x1d4>)
 80042d6:	fb82 1203 	smull	r1, r2, r2, r3
 80042da:	1151      	asrs	r1, r2, #5
 80042dc:	17da      	asrs	r2, r3, #31
 80042de:	1a8a      	subs	r2, r1, r2
 80042e0:	2164      	movs	r1, #100	; 0x64
 80042e2:	fb01 f202 	mul.w	r2, r1, r2
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
		SegArray[2] = Digit / 10;
 80042ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ee:	4a23      	ldr	r2, [pc, #140]	; (800437c <separate_Digit_to_digits+0x1d8>)
 80042f0:	fb82 1203 	smull	r1, r2, r2, r3
 80042f4:	1092      	asrs	r2, r2, #2
 80042f6:	17db      	asrs	r3, r3, #31
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b21a      	sxth	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	3302      	adds	r3, #2
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
		SegArray[3] = Digit % 10;
 8004304:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <separate_Digit_to_digits+0x1d8>)
 800430a:	fb83 1302 	smull	r1, r3, r3, r2
 800430e:	1099      	asrs	r1, r3, #2
 8004310:	17d3      	asrs	r3, r2, #31
 8004312:	1ac9      	subs	r1, r1, r3
 8004314:	460b      	mov	r3, r1
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	b21a      	sxth	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3303      	adds	r3, #3
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
		if(BlankingFlag)
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <separate_Digit_to_digits+0x1dc>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d018      	beq.n	8004362 <separate_Digit_to_digits+0x1be>
		{
			if(SegArray[0] == 0)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d114      	bne.n	8004362 <separate_Digit_to_digits+0x1be>
			{
				SegArray[0] = INDEX_BLANK;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
				if(SegArray[1] == 0)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10c      	bne.n	8004362 <separate_Digit_to_digits+0x1be>
				{
					SegArray[1] = INDEX_BLANK;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
					if(SegArray[2] == 0) SegArray[2] = INDEX_BLANK;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	3302      	adds	r3, #2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <separate_Digit_to_digits+0x1be>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3302      	adds	r3, #2
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	BlankingFlag = 1;
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <separate_Digit_to_digits+0x1dc>)
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e000      	b.n	800436c <separate_Digit_to_digits+0x1c8>
	if((Digit > 9999)||(Digit < -999))return;
 800436a:	bf00      	nop
}
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	51eb851f 	.word	0x51eb851f
 800437c:	66666667 	.word	0x66666667
 8004380:	200004f9 	.word	0x200004f9
 8004384:	10624dd3 	.word	0x10624dd3

08004388 <TM1637_display>:
/**
  * @brief  отображает один символ из массива
  * @retval void
  */
void TM1637_display(uint8_t Seg_N,int8_t DispData)//  в определенном месте  (от 0 до 3)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	460a      	mov	r2, r1
 8004392:	71fb      	strb	r3, [r7, #7]
 8004394:	4613      	mov	r3, r2
 8004396:	71bb      	strb	r3, [r7, #6]
	int8_t SegData;
	SegData = TM1637_coding(DispData);
 8004398:	79bb      	ldrb	r3, [r7, #6]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fe7c 	bl	8004098 <TM1637_coding>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
	TM1637_Generate_START();
 80043a4:	f7ff fdf2 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(ADDR_FIXED);//1:фиксированный адресс
 80043a8:	2044      	movs	r0, #68	; 0x44
 80043aa:	f7ff fe35 	bl	8004018 <TM1637_WriteData>
	TM1637_Generate_STOP();
 80043ae:	f7ff fe09 	bl	8003fc4 <TM1637_Generate_STOP>
	TM1637_Generate_START();
 80043b2:	f7ff fdeb 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(Seg_N|0xc0);// устанавливаем адресс старшие 2 бита должны быть 1(0xc0)+ номер сегмента
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe2a 	bl	8004018 <TM1637_WriteData>
	TM1637_WriteData(SegData);// отправляем "кодированные" данные для одного сегмента
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fe26 	bl	8004018 <TM1637_WriteData>
	TM1637_Generate_STOP();
 80043cc:	f7ff fdfa 	bl	8003fc4 <TM1637_Generate_STOP>
	TM1637_Generate_START();
 80043d0:	f7ff fddc 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(Cmd_DispCtrl);//включаем дисплей с выставлленой яркостью;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <TM1637_display+0x64>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fe1d 	bl	8004018 <TM1637_WriteData>
	TM1637_Generate_STOP();
 80043de:	f7ff fdf1 	bl	8003fc4 <TM1637_Generate_STOP>
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200004fa 	.word	0x200004fa

080043f0 <TM1637_display_all>:
/**
  * @brief  отображение чисел -999-9999
  * @retval void
  */
void TM1637_display_all(uint16_t Digit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	80fb      	strh	r3, [r7, #6]
	uint8_t SegData[4];
	uint8_t i;
	separate_Digit_to_digits(Digit,SegData);
 80043fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fe:	f107 0208 	add.w	r2, r7, #8
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fecd 	bl	80041a4 <separate_Digit_to_digits>
	TM1637_coding_all(SegData);
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe68 	bl	80040e4 <TM1637_coding_all>
	TM1637_Generate_START();
 8004414:	f7ff fdba 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(ADDR_AUTO);//автоматический инкремент адреса
 8004418:	2040      	movs	r0, #64	; 0x40
 800441a:	f7ff fdfd 	bl	8004018 <TM1637_WriteData>
	TM1637_Generate_STOP();
 800441e:	f7ff fdd1 	bl	8003fc4 <TM1637_Generate_STOP>
	TM1637_Generate_START();
 8004422:	f7ff fdb3 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(Cmd_SetAddr);//адрес первого сегмента 0xc0
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <TM1637_display_all+0x84>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fdf4 	bl	8004018 <TM1637_WriteData>
	for(i=0;i < 4;i ++) {
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e00b      	b.n	800444e <TM1637_display_all+0x5e>
	  TM1637_WriteData(SegData[i]);//передаем значения для i-го сегмента
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	f107 0210 	add.w	r2, r7, #16
 800443c:	4413      	add	r3, r2
 800443e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fde8 	bl	8004018 <TM1637_WriteData>
	for(i=0;i < 4;i ++) {
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	3301      	adds	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d9f0      	bls.n	8004436 <TM1637_display_all+0x46>
	}
	TM1637_Generate_STOP();
 8004454:	f7ff fdb6 	bl	8003fc4 <TM1637_Generate_STOP>
	TM1637_Generate_START();
 8004458:	f7ff fd98 	bl	8003f8c <TM1637_Generate_START>
	TM1637_WriteData(Cmd_DispCtrl);//включаем дисплей с выставлленой яркостью;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <TM1637_display_all+0x88>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fdd9 	bl	8004018 <TM1637_WriteData>
	TM1637_Generate_STOP();
 8004466:	f7ff fdad 	bl	8003fc4 <TM1637_Generate_STOP>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000009 	.word	0x20000009
 8004478:	200004fa 	.word	0x200004fa

0800447c <TM1637_brightness>:
/**
  * @brief  регулровка яркости дисплея
  * @retval void
  */
void TM1637_brightness(uint8_t brightness)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
	Cmd_DispCtrl = 0x88 + brightness;
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	3b78      	subs	r3, #120	; 0x78
 800448a:	b2da      	uxtb	r2, r3
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <TM1637_brightness+0x20>)
 800448e:	701a      	strb	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	200004fa 	.word	0x200004fa

080044a0 <TM1637_clearDisplay>:
/**
  * @brief  очистка дисплея
  * @retval void
  */
void TM1637_clearDisplay(void) 
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i=0;i<4;i++)TM1637_display(i,0x7f); 
 80044a6:	2300      	movs	r3, #0
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	e007      	b.n	80044bc <TM1637_clearDisplay+0x1c>
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	217f      	movs	r1, #127	; 0x7f
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff69 	bl	8004388 <TM1637_display>
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	3301      	adds	r3, #1
 80044ba:	71fb      	strb	r3, [r7, #7]
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d9f4      	bls.n	80044ac <TM1637_clearDisplay+0xc>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4e0d      	ldr	r6, [pc, #52]	; (8004504 <__libc_init_array+0x38>)
 80044d0:	4c0d      	ldr	r4, [pc, #52]	; (8004508 <__libc_init_array+0x3c>)
 80044d2:	1ba4      	subs	r4, r4, r6
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	2500      	movs	r5, #0
 80044d8:	42a5      	cmp	r5, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	4e0b      	ldr	r6, [pc, #44]	; (800450c <__libc_init_array+0x40>)
 80044de:	4c0c      	ldr	r4, [pc, #48]	; (8004510 <__libc_init_array+0x44>)
 80044e0:	f000 f820 	bl	8004524 <_init>
 80044e4:	1ba4      	subs	r4, r4, r6
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	2500      	movs	r5, #0
 80044ea:	42a5      	cmp	r5, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f4:	4798      	blx	r3
 80044f6:	3501      	adds	r5, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fe:	4798      	blx	r3
 8004500:	3501      	adds	r5, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	08004570 	.word	0x08004570
 8004508:	08004570 	.word	0x08004570
 800450c:	08004570 	.word	0x08004570
 8004510:	08004574 	.word	0x08004574

08004514 <memset>:
 8004514:	4402      	add	r2, r0
 8004516:	4603      	mov	r3, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
